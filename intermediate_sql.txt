PRACTICE PROBLEM 1

Write a query to count the number of non-null rows in the low column.

SELECT COUNT(low)
  FROM tutorial.aapl_historical_stock_price

This query is counting all rows in the 'low' column that have non-null values.  The answer is 3,535.

PRACTICE PROBLEM 2

Write a query that determines counts of every single column. Which column has the most null values?

SELECT COUNT(date) AS date_count,
    COUNT(year) AS year_count,
    COUNT(month) AS month_count,
    COUNT(open) AS open_count,
    COUNT(high) AS high_count,
    COUNT(low) AS low_count,
    COUNT(close) AS close_count,
    COUNT(volume) AS volume_count
  FROM tutorial.aapl_historical_stock_price

The column 'high' has the most null values; there are only 3,531 non-null values compared to 3,555 total rows.

PRACTICE PROBLEM 3

Write a query to calculate the average opening price (hint: you will need to use both COUNT and SUM, as well as some simple arithmetic.).

Step 1: SELECT COUNT(open)
  FROM tutorial.aapl_historical_stock_price

(3,541 rows)

Step 2: SELECT SUM(open)
  FROM tutorial.aapl_historical_stock_price

(583,483.72)

avg opening price = 583,483.72 / 3,541 = 164.78 is the average opening price

Note: I checked the answer and was reminded that I can do the arithmatic within SQL, like this:
SELECT SUM(open)/COUNT(open) AS avg_open_price
  FROM tutorial.aapl_historical_stock_price

PRACTICE PROBLEM 4

What was Apple's lowest stock price (at the time of this data collection)?

SELECT MIN(low) AS min_low
  FROM tutorial.aapl_historical_stock_price

answer = 6.36.  

This is the minimum of the low daily stock price.  Note: you can do the minimum of all stock price columns (open, close, low, high)
but the minimum of the open stock price column is 0 - which probably means the market was closed that day, and is a misleading figure.

PRACTICE PROBLEM 5

What was the highest single-day increase in Apple's share value?

SELECT MAX(high - low) AS max_increase
  FROM tutorial.aapl_historical_stock_price

answer = 59

Excellent, I learned you can combine arithmatic in the aggregation functions. 

However, I checked the answer and a possible solution is:
SELECT MAX(close - open)
  FROM tutorial.aapl_historical_stock_price

which returns 32.58  

My mistake was to use high and low columns instead of open and close columns.

PRACTICE PROBLEM 6

Write a query that calculates the average daily trade volume for Apple stock.

SELECT AVG(volume)
  FROM tutorial.aapl_historical_stock_price

This calculates average on the volume colume.

PRACTICE PROBLEM 7

Calculate the total number of shares traded each month. Order your results chronologically.

SELECT year,
       month,
       SUM(volume) AS monthly_volume
  FROM tutorial.aapl_historical_stock_price
GROUP BY year, month
ORDER BY year, month

This query displays year then month then the total (sum of volume column) of shares each month.  
Results are sorted by year, then month.

PRACTICE PROBLEM 8

Write a query to calculate the average daily price change in Apple stock, grouped by year.

SELECT year,
    AVG(high - low) AS avg_price_change
  FROM tutorial.aapl_historical_stock_price
GROUP BY year

This query calculatesthe low price column subtracted from the high price column for each row
and then calculates the average of those values for each year.

PRACTICE PROBLEM 9

Write a query that calculates the lowest and highest prices that Apple stock achieved each month.

SELECT year,
       month,
       MAX(high),
       MIN(low)
  FROM tutorial.aapl_historical_stock_price
GROUP BY year, month
ORDER BY year, month

This query returns the highest high price and lowest low price for each month, because it is grouped by month.

PRACTICE PROBLEM 10

Write a query that includes a column that is flagged "yes" when a player is from California, and sort the results with those players first.

SELECT full_school_name,
       player_name,
       position,
       year,
       hometown,
       CASE WHEN state = 'CA' THEN 'yes'
            ELSE 'no' END AS from_california
  FROM benn.college_football_players
  ORDER BY from_california DESC, full_school_name

This query adds yes in a new column is the player's hometown state is CA.
Then it orders the results by that column (descending so that yes is first) and by school name (alphabetically).

PRACTICE PROBLEM 11

Write a query that includes players' names and a column that classifies them into four categories based on height. 
Keep in mind that the answer we provide is only one of many possible answers, since you could divide players' heights in many ways.

SELECT player_name,
       height,
       CASE WHEN height = 0 THEN 'NULL'
            WHEN height <= 72 AND height  > 0 THEN 'below_avg_height'
            WHEN height > 72 AND height <= 73 THEN 'avg_height'
            ELSE 'above_avg_height' END AS height_group
  FROM benn.college_football_players
  ORDER BY height_group

I did a MIN, MAX, and AVG on the height columns, to try and group them.  
The MIN is 0 height - which I'm guessing means no height was available for those players. 
The average height was 72.6 - so I labelled the 72 - 73 range as average.
And then, I made groupings for those with 0 height, below average height and above average height.

PRACTICE PROBLEM 12

Write a query that selects all columns from benn.college_football_players 
and adds an additional column that displays the player's name 
if that player is a junior or senior.

SELECT full_school_name,
       school_name,
       player_name,
       position,
       height,
       weight,
       year,
    CASE WHEN year = 'JR' OR year = 'SR' THEN player_name
         ELSE NULL END AS junior_or_senior,
       hometown,
       state,
       id
  FROM benn.college_football_players
  ORDER BY junior_or_senior, full_school_name

Through setting up this query, I learned that I can include columns after my case statement,
in order to embed my new calculated column wherever I would like in the dataset.

PRACTICE PROBLEM 13

Write a query that counts the number of 300lb+ players for each of the following regions: 
West Coast (CA, OR, WA), Texas, and Other (Everywhere else).

SELECT CASE WHEN state IN ('CA', 'OR', 'WA') THEN 'West Coast'
            WHEN state = 'TX' THEN 'Texas'
            ELSE 'Other' END AS region,
            COUNT(1) as players
  FROM benn.college_football_players
  WHERE weight >= 300
GROUP BY region

I had originally tried to put the weight >= 300 in the COUNT function. 
Instead, I see that the solution does a count on the number of players in each region (as defined by the case statement)
and then limits that to players weighing more than 300lbs with the WHERE statement.

PRACTICE PROBLEM 14

Write a query that calculates the combined weight of all underclass players (FR/SO) in California 
as well as the combined weight of all upperclass players (JR/SR) in California.

SELECT CASE WHEN year IN ('FR', 'SO') THEN 'underclass'
            WHEN year IN ('JR', 'SR') THEN 'upperclass'
            ELSE 'Other' END AS class_level,
            SUM(weight) AS combined_weight
  FROM benn.college_football_players
WHERE state = 'CA'
GROUP BY 1

This query creates the column labelling players as under or upperclass and then sums the weight of all players,
before then limiting the results to the sum of player weights in California.

PRACTICE PROBLEM 15

Write a query that displays the number of players in each state, 
with FR, SO, JR, and SR players in separate columns 
and another column for the total number of players. 
Order results such that states with the most players come first.

SELECT state,
       COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count,
       COUNT(1) AS total_players
  FROM benn.college_football_players
GROUP BY state
ORDER BY total_players DESC

Total transparency!  I had to use the 'see the answer' to pull this query together.
However, I've learned that you can use the state column separately from the case statements
and also do that count as it's own column, just like when you write this query to display
horizontally.  

PRACTICE PROBLEM 16

Write a query that shows the number of players at schools with names that start with A through M, 
and the number at schools with names starting with N - Z.

SELECT CASE WHEN school_name < 'n' THEN 'A-M'
            WHEN school_name >= 'n' THEN 'N-Z'
            ELSE NULL END AS school_name_group,
       COUNT(1) AS players
  FROM benn.college_football_players
 GROUP BY 1

This was more help I got from 'see the answer'.  I was trying to use ILIKE statements, but that would have 
been a very long query.  Now I'm reminded to use alphabetizing!  This solution is much simpler.

PRACTICE PROBLEM 17

Write a query that returns the unique values in the year column, in chronological order.

SELECT DISTINCT year
  FROM tutorial.aapl_historical_stock_price
ORDER BY year

This query returns each year in the dataset listed once - instead of returning a row for each time the year is listed.


PRACTICE PROBLEM 18

Write a query that counts the number of unique values in the month column for each year.

SELECT year,
  COUNT(DISTINCT month) AS num_months
  FROM tutorial.aapl_historical_stock_price
GROUP BY year
ORDER BY year

Interesting...I had the SELECT statement correct for this one, but needed to add the GROUP BY AND ORDER BY to pull results.

PRACTICE PROBLEM 19

Write a query that separately counts the number of unique values in the month column and the number of unique values in the `year` column.

SELECT COUNT(DISTINCT month) AS num_months,
       COUNT(DISTINCT year) AS num_years
  FROM tutorial.aapl_historical_stock_price

This yields two nice and tidy columns with 12 distinct months and 15 distinct years.

PRACTICE PROBLEM 20

Write a query that selects the school name, player name, position, and weight for every player in Georgia, ordered by weight (heaviest to lightest). 
Be sure to make an alias for the table, and to reference all column names in relation to the alias.

SELECT players.school_name,
       players.player_name,
       players.position,
       players.weight,
       players.state
  FROM benn.college_football_players players
  WHERE players.state = 'GA'
ORDER BY players.weight DESC

I wasn't required to reference the players table in my column names (the query would have worked withouth it since I'm using one table).
But, this was very very good practice to understand how that referencing works.

PRACTICE PROBLEM 21

Write a query that displays player names, school names and conferences for schools in the "FBS (Division I-A Teams)" division.

SELECT players.player_name,
       players.full_school_name,
       teams.division,
       teams.conference
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
  WHERE teams.division = 'FBS (Division I-A Teams)'

This query gets me the columns requested, filtered by the division stated.  
I'm doing an inner join (i.e. not getting rows that don't match) by stating JOIN.

PRACTICE PROBLEM 22

Write a query that performs an inner join between the tutorial.crunchbase_acquisitions table 
and the tutorial.crunchbase_companies table, but instead of listing individual rows, count the number of non-null rows in each table.

SELECT COUNT(DISTINCT companies.permalink) AS companies_permalink,
       COUNT(DISTINCT acquisitions.company_permalink) AS acquisitions_permalink
  FROM tutorial.crunchbase_companies companies
  JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink

This query pulls company names if they exist in both tables, the companies table count has the same number of distinct company names (rows) as the acquisitions table count.

PRACTICE PROBLEM 23

Modify the query above to be a LEFT JOIN. Note the difference in results.

SELECT COUNT(DISTINCT companies.permalink) AS companies_permalink,
       COUNT(DISTINCT acquisitions.company_permalink) AS acquisitions_permalink
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink

With a left join, the companies table yields more company names (27,326 instead of 1,645) and the 
acquisitions table has 1,645 matching company names (just like in the inner join).

PRACTICE PROBLEM 24

Count the number of unique companies (don't double-count companies) and unique acquired companies by state. 
Do not include results for which there is no state data, and order by the number of acquired companies from highest to lowest.

SELECT companies.state_code,
       COUNT(DISTINCT companies.permalink) AS listed_companies,
       COUNT(DISTINCT acquisitions.company_permalink) AS acquired_companies
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
WHERE companies.state_code IS NOT NULL
GROUP BY companies.state_code
ORDER BY acquired_companies DESC

This query returns the count of companies by state (group by state code) and companies without state name are excluded.  

PRACTICE PROBLEM 25

SELECT companies.state_code,
       COUNT(DISTINCT companies.permalink) AS listed_companies,
       COUNT(DISTINCT acquisitions.company_permalink) AS acquired_companies
  FROM tutorial.crunchbase_acquisitions acquisitions
  RIGHT JOIN tutorial.crunchbase_companies companies
    ON companies.permalink = acquisitions.company_permalink
WHERE companies.state_code IS NOT NULL
GROUP BY companies.state_code
ORDER BY acquired_companies DESC

To reproduce the LEFT JOIN results using a RIGHT JOIN, I needed to switch the FROM table (from companies to acquisitions) and switch the JOIN table 
(from acquisitions to companies)

PRACTICE PROBLEM 26

Write a query that shows a company's name, "status" (found in the Companies table), and the number of unique investors in that company. 
Order by the number of investors from most to fewest. Limit to only companies in the state of New York.

SELECT companies.name AS company_name,
       companies.status,
       COUNT(DISTINCT investments.investor_name) AS unqiue_investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments investments
    ON companies.permalink = investments.company_permalink
 WHERE companies.state_code = 'NY'
 GROUP BY 1,2
 ORDER BY 3 DESC

Well, I had to get help on this one.  I was trying to pull company name from the investments table and that wasn't working.
This solution pulls company name and status from the companies table and then joins the number of investors to it.

PRACTICE PROBLEM 27

Write a query that lists investors based on the number of companies in which they are invested. 
Include a row for companies with no investor, and order from most companies to least.

Here is the start of my query:

SELECT investments.investor_name,
       COUNT (investments.company_name)
  FROM tutorial.crunchbase_investments investments
  LEFT JOIN tutorial.crunchbase_companies companies
  ON companies.permalink = investments.company_permalink
  GROUP BY 1

This is taking an extraordinary amount of time to run (more than 2 minutes) and I'll come back to it ASAP.

I see that a possible solution is very different, though:
SELECT CASE WHEN investments.investor_name IS NULL THEN 'No Investors'
            ELSE investments.investor_name END AS investor,
       COUNT(DISTINCT companies.permalink) AS companies_invested_in
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1
 ORDER BY 2 DESC

I wouldn't have thought about using a CASE statement.  I was going to try and work in a WHERE statement to capture null values.
 WHERE investments.investor_name IS NULL  But actually, I see that if I include this WHERE statement, it will limit my results to NULL values.
This is why the CASE statement in the solution is needed.
