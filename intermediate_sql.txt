PRACTICE PROBLEM 1

Write a query to count the number of non-null rows in the low column.

SELECT COUNT(low)
  FROM tutorial.aapl_historical_stock_price

This query is counting all rows in the 'low' column that have non-null values.  The answer is 3,535.

PRACTICE PROBLEM 2

Write a query that determines counts of every single column. Which column has the most null values?

SELECT COUNT(date) AS date_count,
    COUNT(year) AS year_count,
    COUNT(month) AS month_count,
    COUNT(open) AS open_count,
    COUNT(high) AS high_count,
    COUNT(low) AS low_count,
    COUNT(close) AS close_count,
    COUNT(volume) AS volume_count
  FROM tutorial.aapl_historical_stock_price

The column 'high' has the most null values; there are only 3,531 non-null values compared to 3,555 total rows.

PRACTICE PROBLEM 3

Write a query to calculate the average opening price (hint: you will need to use both COUNT and SUM, as well as some simple arithmetic.).

Step 1: SELECT COUNT(open)
  FROM tutorial.aapl_historical_stock_price

(3,541 rows)

Step 2: SELECT SUM(open)
  FROM tutorial.aapl_historical_stock_price

(583,483.72)

avg opening price = 583,483.72 / 3,541 = 164.78 is the average opening price

Note: I checked the answer and was reminded that I can do the arithmatic within SQL, like this:
SELECT SUM(open)/COUNT(open) AS avg_open_price
  FROM tutorial.aapl_historical_stock_price

PRACTICE PROBLEM 4

What was Apple's lowest stock price (at the time of this data collection)?

SELECT MIN(low) AS min_low
  FROM tutorial.aapl_historical_stock_price

answer = 6.36.  

This is the minimum of the low daily stock price.  Note: you can do the minimum of all stock price columns (open, close, low, high)
but the minimum of the open stock price column is 0 - which probably means the market was closed that day, and is a misleading figure.

PRACTICE PROBLEM 5

What was the highest single-day increase in Apple's share value?

SELECT MAX(high - low) AS max_increase
  FROM tutorial.aapl_historical_stock_price

answer = 59

Excellent, I learned you can combine arithmatic in the aggregation functions. 

However, I checked the answer and a possible solution is:
SELECT MAX(close - open)
  FROM tutorial.aapl_historical_stock_price

which returns 32.58  

My mistake was to use high and low columns instead of open and close columns.

PRACTICE PROBLEM 6

Write a query that calculates the average daily trade volume for Apple stock.

SELECT AVG(volume)
  FROM tutorial.aapl_historical_stock_price

This calculates average on the volume colume.

PRACTICE PROBLEM 7

Calculate the total number of shares traded each month. Order your results chronologically.

SELECT year,
       month,
       SUM(volume) AS monthly_volume
  FROM tutorial.aapl_historical_stock_price
GROUP BY year, month
ORDER BY year, month

This query displays year then month then the total (sum of volume column) of shares each month.  
Results are sorted by year, then month.

PRACTICE PROBLEM 8

Write a query to calculate the average daily price change in Apple stock, grouped by year.

SELECT year,
    AVG(high - low) AS avg_price_change
  FROM tutorial.aapl_historical_stock_price
GROUP BY year

This query calculatesthe low price column subtracted from the high price column for each row
and then calculates the average of those values for each year.

PRACTICE PROBLEM 9

Write a query that calculates the lowest and highest prices that Apple stock achieved each month.

SELECT year,
       month,
       MAX(high),
       MIN(low)
  FROM tutorial.aapl_historical_stock_price
GROUP BY year, month
ORDER BY year, month

This query returns the highest high price and lowest low price for each month, because it is grouped by month.

PRACTICE PROBLEM 10

Write a query that includes a column that is flagged "yes" when a player is from California, and sort the results with those players first.

SELECT full_school_name,
       player_name,
       position,
       year,
       hometown,
       CASE WHEN state = 'CA' THEN 'yes'
            ELSE 'no' END AS from_california
  FROM benn.college_football_players
  ORDER BY from_california DESC, full_school_name

This query adds yes in a new column is the player's hometown state is CA.
Then it orders the results by that column (descending so that yes is first) and by school name (alphabetically).

PRACTICE PROBLEM 11

Write a query that includes players' names and a column that classifies them into four categories based on height. 
Keep in mind that the answer we provide is only one of many possible answers, since you could divide players' heights in many ways.

SELECT player_name,
       height,
       CASE WHEN height = 0 THEN 'NULL'
            WHEN height <= 72 AND height  > 0 THEN 'below_avg_height'
            WHEN height > 72 AND height <= 73 THEN 'avg_height'
            ELSE 'above_avg_height' END AS height_group
  FROM benn.college_football_players
  ORDER BY height_group

I did a MIN, MAX, and AVG on the height columns, to try and group them.  
The MIN is 0 height - which I'm guessing means no height was available for those players. 
The average height was 72.6 - so I labelled the 72 - 73 range as average.
And then, I made groupings for those with 0 height, below average height and above average height.

PRACTICE PROBLEM 12

Write a query that selects all columns from benn.college_football_players 
and adds an additional column that displays the player's name 
if that player is a junior or senior.

SELECT full_school_name,
       school_name,
       player_name,
       position,
       height,
       weight,
       year,
    CASE WHEN year = 'JR' OR year = 'SR' THEN player_name
         ELSE NULL END AS junior_or_senior,
       hometown,
       state,
       id
  FROM benn.college_football_players
  ORDER BY junior_or_senior, full_school_name

Through setting up this query, I learned that I can include columns after my case statement,
in order to embed my new calculated column wherever I would like in the dataset.

PRACTICE PROBLEM 13

Write a query that counts the number of 300lb+ players for each of the following regions: 
West Coast (CA, OR, WA), Texas, and Other (Everywhere else).

SELECT CASE WHEN state IN ('CA', 'OR', 'WA') THEN 'West Coast'
            WHEN state = 'TX' THEN 'Texas'
            ELSE 'Other' END AS region,
            COUNT(1) as players
  FROM benn.college_football_players
  WHERE weight >= 300
GROUP BY region

I had originally tried to put the weight >= 300 in the COUNT function. 
Instead, I see that the solution does a count on the number of players in each region (as defined by the case statement)
and then limits that to players weighing more than 300lbs with the WHERE statement.

PRACTICE PROBLEM 14

Write a query that calculates the combined weight of all underclass players (FR/SO) in California 
as well as the combined weight of all upperclass players (JR/SR) in California.

SELECT CASE WHEN year IN ('FR', 'SO') THEN 'underclass'
            WHEN year IN ('JR', 'SR') THEN 'upperclass'
            ELSE 'Other' END AS class_level,
            SUM(weight) AS combined_weight
  FROM benn.college_football_players
WHERE state = 'CA'
GROUP BY 1

This query creates the column labelling players as under or upperclass and then sums the weight of all players,
before then limiting the results to the sum of player weights in California.

PRACTICE PROBLEM 15

Write a query that displays the number of players in each state, 
with FR, SO, JR, and SR players in separate columns 
and another column for the total number of players. 
Order results such that states with the most players come first.

SELECT state,
       COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count,
       COUNT(1) AS total_players
  FROM benn.college_football_players
GROUP BY state
ORDER BY total_players DESC

Total transparency!  I had to use the 'see the answer' to pull this query together.
However, I've learned that you can use the state column separately from the case statements
and also do that count as it's own column, just like when you write this query to display
horizontally.  

PRACTICE PROBLEM 16

Write a query that shows the number of players at schools with names that start with A through M, 
and the number at schools with names starting with N - Z.

SELECT CASE WHEN school_name < 'n' THEN 'A-M'
            WHEN school_name >= 'n' THEN 'N-Z'
            ELSE NULL END AS school_name_group,
       COUNT(1) AS players
  FROM benn.college_football_players
 GROUP BY 1

This was more help I got from 'see the answer'.  I was trying to use ILIKE statements, but that would have 
been a very long query.  Now I'm reminded to use alphabetizing!  This solution is much simpler.

PRACTICE PROBLEM 17

